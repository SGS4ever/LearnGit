2020.2.3 Unity学习笔记开篇

1、使用HDR imagine更改天空球。在https://www.hdrihaven.com/下载一幅HDR图片，放入Unity。新建一个material，将其Shader改成Skybox -> Panoramic。其中Panoramic的意思为“全景的”。将HDRI放入，制成天空球，拖到Scene中。

2、在导入Unity Chan后无法运行，不断报错。依照报错提示，进入UnityChan目录，将其中AutoBlinks.cs文件中的第八行using System.Security.Policy注释掉。

3、添加墙体之后，人物磨墙可能出现旋转，此时要点击人物，在Rigridbody栏内的Constraints中将XYZ轴锁定。

4、旋转有矩阵旋转、欧拉旋转和四元数旋转。都不会。物体transform的rotation属性可以使用函数transform.localEulerAngles获得和改变，改变方法直接使用new Vector3赋值。用这种方法得到的数值就是点选物体之后右侧栏中的数值，而用transform.rotation得到的数值并不是右边栏的数值，需要注意。

5、将玩家输入转化为信号，利用四个变量KeyUp、KeyDown、KeyLeft和KeyRight表示键盘按键，用两个变量Dup和Dright就可以表示方向信号。具体语句为：
Dup = (Input.GetKey(KeyUp) ? 1.0f : 0) - (Input.GetKey(KeyDown) ? 1.0f : 0)
Dright类似。
如此，当玩家按下KeyUp时，Dup = 1；当玩家按下KeyDown时，Dup = -1，同时按下则为0。
Dright同理。

6、将信号的变化平滑处理，使用Mathf.SmoothDamp()函数。第一个参数是当前数值，第二个参数是目标数值，第三个参数是当前数值的引用，第四个参数是完成变化所需要的时间。第三个参数即引用参数在传递时需要在参数名之前加上ref。此外，设置一个布尔变量AllowInput，如果该值为false，则直接将targetDup等变量都设置为0。

7、动画效果的Blender tree类似于动画效果的集合，其中有参数控制各个动画在总动画中所占的比例。在Animator Controller界面中右键，点选Create state中的New Blender Tree，在右边栏新建Motion，将所需的动画拖拽放入。

8、将动画效果与输入信号相关联。在Ybot的父节点上创造控制组件ActorController，其中有public GameObject model变量，该变量设置为子节点Ybot。还有private Animator anim变量，该变量是Ybot节点中的Animator组件，动画的播放由该组件控制。最后是private UserInput pi变量，该变量是Ybot节点中的UserInput组件，信号由该组件得到。使用语句
anim = model.GetComponent<Animator> ();得到model底下的组件。最后
anim.SetFloat("Forward", pi.Dup);将信号与动画效果绑定。

9、进行人物方向的改变。实践证明教程代码存在错误，即transform.forward是不可以用在Dvec的赋值上的，因为Dvec会改变transform.forward的数值。比如按下S键，人物向后转，此时transform.forward已经指向后方，依照Dvec = Dup * transform.forward会出现反复跳变。解决方法是声明private Vector3 Forward和Right变量，分别是固定的(0,0,1)和(1,0,0)，代表坐标的前和右。于是Dvec = Dup * Forward + Dright * Right。在ActorController中model.transform.forward = pi.Dvec。

10、直接写model.transform.forward而不加判断的话存在一个问题，即当Dup和Dright都变为0之后会自动将角色转向前方，此时只需要在前面判断Dlength是否大于某固定值（如0.1），如果大于该值说明有信号输入，开始移动，否则维持原样即可。

11、为了让YBot的父节点即胶囊体也能运动，我们必须为其增加一个rigridbody，在代码中对rigid.position进行控制。
取rigid.position += speed * movingVec * Time.fixedDeltaTime。
操作完成之后还出现胶囊体的运动与模型运动不同步的问题，原因是开启了模型Animator组件中的Apply Root Motion，此时需要将其关闭。

12、为跳跃绑定动画。在AnimatorController的BaseLayer中放入跳跃动画，右击Ground类设置Transitions，同理为jump设置。将右边栏transitions展开，拖至最下方为其添加Condition。此前需要为Animator新增Jump参数，设置为Trigger。从Ground到Jump的条件就设置为Jump参数。
程序中直接引用UserInput中的jump信号，若检测到信号就SetTrigger("jump")。

13、在跳跃动画中，如果短时间连续按两下跳跃键，会在Jump处形成累积，从而导致动画播放两次。此时在Ground动画右边栏新增一个脚本FSMClearSignals，设置clearAtEnter数组和clearAtExit数组，在OnStateEnter和OnStateExit函数中设置相应的清除语句。为了实现清除Jump累积的目标，我们在进入Ground状态时进行清除，即在OnStateEnter中将所有clearAtEnter中的元素进行ResetTrigger。

14、将跳跃动画信号曝露给主控制器。在Jump动画中新增脚本，在OnStateEnter和OnStateExit函数中调用父节点的函数，即使用JumpEnterEvents和JumpExitEvents数组存放进入/离开jump动画时需要调用的函数名，在两个函数中使用SenMessageUpwards(events)调用父节点函数。

15、在进行跳跃动画时还可以随意转向，这是不合理的。我们需要在JumpEnter函数中禁用Input，即设置pi.AllwoInput = false。同时，当禁用Input之后会使Dlength = 0，也就是movingVec会清零，这是不合理的。设置一个lockMoving变量，当jump = true时不对movingVec进行更新。

16、跳跃的竖直方向的速度设置，如果在FixedUpdate函数中使用rigid.position会出现跳变，目前还没有想到解决的方案，因而转为使用语句
rigid.velocity = new Vector3(movingVec.x, rigid.velocity.y, movingVec.z) + jumpPower。其中jumpPower代表每一次跳跃为竖直方向所产生的速度。
于是，在JumpEnter函数中为jumpPower赋值，而改变了rigid.velocity之后要清空jumpPower。

17、检测碰撞目标。首先创建一个与YBot同级的空物体，在其中创建脚本OnGroundSensor，脚本中记录父节点即胶囊体的信息，包括两个半球的球心和半径，如此可以唯一确认胶囊体。之后利用Unity API：Physics.OverlapCapsule可以检测碰撞，返回参与碰撞的物体数组。

18、当Jump动画退出之后，加在其中的脚本会发送JumpExit信息，设置pi.AllowInput为true，此时由于松开方向键，会使得movingVec清零，变为垂直下落。因而改为进入IsGround状态之后再允许输入。对于OnGroundSensor，只要检测到两物体碰撞，就说明已经到达地面，向控制器发送IsGround信息，重新允许输入。

19、相机旋转采用水平-垂直分开控制的策略。水平旋转由最高级的Model控制，垂直旋转由相机的父节点即CameraHandler控制。水平旋转可以直接使用player.transform.Rotate(Vector3.up, pi.Cright * rotatePower1 * Tome.deltaTome)，可以自由旋转。垂直旋转由一个临时变量tmpEularX帮助实现，原因是需要先使用Mathf.Clamp(tmpEularX, -30, 30)来限制旋转角度，之后直接使用localEularAngles赋值。

20、在相机水平旋转时，不能够旋转模型，因而使用tmpModelAngle记录每一轮update开始时模型的eularAngles，在update的最后将模型eularAngles写为这个临时变量，如此可以保证旋转外壳胶囊体时模型不旋转。在此发现了之前遗留的模型运动方向的问题，因为在UserInput脚本中记录模型前进的方向时简单地采用(0,0,1)向量，导致现在旋转了相机之后模型前进的方向并不是视野前方，实际上模型运动的方向应该是它的父节点即胶囊体的前方，故更正为transform.parent.gameObject.transform.forward。同理更正right方向。

21、设置延迟移动，将Camera放到模型外面，在原本cameraHandle下创建一个cameraPos物件，用以记录camera应处的位置。在cameraControl脚本中利用Camera.main.gameObject获取MainCamera，在其下将camera的transform.position设为当前的position，并利用Vector3.SmoothDamp实现平滑过渡。此时发现移动过程不流畅，将Update函数改为FixedUpdate，解决问题。


